[project]
name = "workflows-sentinel2-to-zarr"
version = "0.1.0"
description = "Tilebox example workflow for converting Sentinel-2 data to Zarr format"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "dask>=2025.5.1",
    "dotenv>=0.9.9",
    "numpy>=2.2.6",
    "obstore>=0.6.0",
    "odc-geo>=0.4.10",
    "pyproj>=3.7.1",
    "rasterio>=1.4.3",
    "tilebox-datasets>=0.35.0",
    "tilebox-workflows>=0.35.0",
    "xarray>=2025.4.0",
    "zarr>=3.0.8",
]

[dependency-groups]
dev = ["pyright>=1.1.401", "ruff>=0.11.11"]

[tool.ruff]
# settings applying to all ruff subcommands, such as `ruff check` (lint) and `ruff format`
line-length = 120
target-version = "py310"

[tool.ruff.lint]
select = ["ALL"]

# all rules: https://beta.ruff.rs/docs/rules
ignore = [
    # some ruff checking modules don't make much sense as a whole
    "D",   # pydocstyle: pretty strict anyways
    "FBT", # flake8-boolean-trap: boolean arguments can make sense
    "COM", # flake8-commas: formatter takes care of this
    "DTZ", # flake8-datetimez: utc datetimes are useful
    "DJ",  # flake8-django: not needed
    "EM",  # flake8-errmsg: str directly in Exception constructor is accetable
    "TCH", # flake8-type-checking: type checking blocks are weird
    # specific rules
    "ANN401",  # any-type: allow Any in *args and **kwargs
    "S101",    # assert: allow usage of assert
    "B008",    # function-call-argument-default: some default argument values make sense to be function calls
    "G004",    # logging-f-string: allow usage of f-strings in logging calls
    "PLR2004", # magic-value-comparison: sometimes comparison with constants (e.g. 0) makes sense
    "TRY003",  # raise-vanilla-args: exceptions like this make sense in python
    "TRY400",  # error-instead-of-exception: logger.error is ok with loguru
    # disabled because of formatter
    "E501",   # line-too-long -> formatter takes care of this
    "ISC001", # single-line-implicit-str-concatenation -> formatter takes care of this
    "Q",      # flake8-quotes -> formatter takes care of this
    "W191",   # tab-indentation -> formatter takes care of this
]

unfixable = [
    "F841", # unused-variable -> don't remove them automatically
    "ERA",  # eradicate -> (commented out code), don't remove it automatically
]


[tool.pyright]
# pyright needs to have all the dependencies installed to be able to type check
# we can make sure of this by telling it to use the uv venv
venvPath = "."
venv = ".venv"
